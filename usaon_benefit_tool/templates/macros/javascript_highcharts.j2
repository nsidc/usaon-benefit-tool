{% macro add_javascript__highcharts(sankey_series, assessment) -%}
  <script>
    const pointClickHandler = function(event) {
      const point = this;
      if ([point.id, point.from].includes("{{ constants.DUMMY_NODE_ID }}")) {
        console.debug("Ignoring click on dummy node/link");
        return;
      }

      const selector = "#form-modal";
      const el = document.querySelector(selector);

      const isNode = "type" in point;
      let routeTarget, idArgName, idArgValue;
      if (isNode) {
        routeTarget = "assessment.node.form";
        idArgName = "node_id";
        idArgValue = point.id.split("_").slice(-1)[0];
      } else {
        routeTarget = "assessment.link.form";
        idArgName = "link_id";
        idArgValue = point.id;
      }
      const targetUrl = Flask.url_for(
        routeTarget,
        {
          assessment_id: {{ assessment.id }},
          [idArgName]: idArgValue,
        },
      );
      el.setAttribute("hx-get", targetUrl);
      htmx.process(el);

      const modal = new bootstrap.Modal(el, {});
      modal.show();
      htmx.trigger(selector, "modalOpened");
    }

    Highcharts.SVGRenderer.prototype.symbols.download = function (x, y, w, h) {
      const path = [
        'M', x + w * 0.5, y,
        'L', x + w * 0.5, y + h * 0.7,
        'M', x + w * 0.3, y + h * 0.5,
        'L', x + w * 0.5, y + h * 0.7,
        'L', x + w * 0.7, y + h * 0.5,
        'M', x, y + h * 0.9,
        'L', x, y + h,
        'L', x + w, y + h,
        'L', x + w, y + h * 0.9
      ];
      return path;
    };

    Highcharts.setOptions({
      lang: {
        contextButtonTitle: 'Print and download options',
      }
    });

    function getCustomTableData(chart) {
      const series = chart.series[0];

      const headers = [
        'From',
        'To',
        'Weight',
        'Performance Score',
        'Performance Rationale',
        'Criticality Score',
        'Criticality Rationale',
        'Gaps Description'
      ];

      const rows = [];

      series.data.forEach(point => {
        if (point.from === "{{ constants.DUMMY_NODE_ID }}" || point.to === "{{ constants.DUMMY_NODE_ID }}") {
          return;
        }

        const fromNode = series.nodes.find(n => n.id === point.from);
        const toNode = series.nodes.find(n => n.id === point.to);

        const row = [
          fromNode ? fromNode.name : point.from,
          toNode ? toNode.name : point.to,
          point.weight,
          point.options.performance_rating || 'unrated',
          point.options.performance_rationale || '',
          point.options.criticality_rating || 'unrated',
          point.options.criticality_rationale || '',
          point.options.gaps_description || ''
        ];

        rows.push(row);
      });

      return { headers, rows };
    }

    function downloadCustomCSV(chart, filename) {
      const { headers, rows } = getCustomTableData(chart);

      const csvContent = [headers, ...rows]
        .map(row => row.map(cell => `"${cell}"`).join(','))
        .join('\n');

      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', filename);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }

    function downloadCustomExcel(chart, filename) {
      const { headers, rows } = getCustomTableData(chart);

      const csvContent = [headers, ...rows]
        .map(row => row.map(cell => `"${cell}"`).join('\t'))
        .join('\n');

      const blob = new Blob([csvContent], { type: 'application/vnd.ms-excel;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', filename);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }

    function showCustomDataTable(chart) {
      const { headers, rows } = getCustomTableData(chart);

      // Find or create the data table container below the chart
      let tableContainer = document.getElementById('highcharts-data-table');
      if (!tableContainer) {
        tableContainer = document.createElement('div');
        tableContainer.id = 'highcharts-data-table';
        tableContainer.style.marginTop = '20px';
        // Insert after the chart container
        chart.renderTo.parentNode.insertBefore(tableContainer, chart.renderTo.nextSibling);
      }

      // Toggle table visibility
      if (tableContainer.style.display === 'none' || !tableContainer.innerHTML) {
        // Show the table
        let tableHTML = `
          <table style="border-collapse: collapse; width: 100%; border: 1px solid #ddd;">
            <thead>
              <tr style="background-color: #f5f5f5;">`;

        headers.forEach(header => {
          tableHTML += `<th style="padding: 8px; text-align: left; border: 1px solid #ddd; font-weight: bold;">${header}</th>`;
        });

        tableHTML += '</tr></thead><tbody>';

        rows.forEach((row, index) => {
          const bgColor = index % 2 === 0 ? '#ffffff' : '#f9f9f9';
          tableHTML += `<tr style="background-color: ${bgColor};">`;
          row.forEach(cell => {
            tableHTML += `<td style="padding: 8px; border: 1px solid #ddd;">${cell}</td>`;
          });
          tableHTML += '</tr>';
        });

        tableHTML += '</tbody></table>';

        tableContainer.innerHTML = tableHTML;
        tableContainer.style.display = 'block';
      } else {
        // Hide the table
        tableContainer.style.display = 'none';
      }
    }

    Highcharts.chart('highcharts-container', {
      chart: {
        type: 'sankey',
      },
      plotOptions: {
        sankey: {
          point: {
            events: {
              click: pointClickHandler,
            },
          },
          dataLabels: {
            style: {
              fontSize: "0.8em",
            },
          },
        },
      },
      title: {
        text: "{{ assessment_title }}",
        style: {fontSize: '20px'},
      },
      exporting: {
        buttons: {
          contextButton: {
            symbol: "download",
            menuItems: [
              'viewFullscreen',
              'printChart',
              'separator',
              'downloadPNG',
              'downloadJPEG',
              'downloadSVG',
              'separator',
              {
                text: 'Download CSV',
                onclick: function() {
                  downloadCustomCSV(this, 'assessment_{{ assessment.id }}_data.csv');
                }
              },
              {
                text: 'Download XLS',
                onclick: function() {
                  downloadCustomExcel(this, 'assessment_{{ assessment.id }}_data.xlsx');
                }
              },
              {
                text: 'View data table',
                onclick: function() {
                  showCustomDataTable(this);
                }
              }
            ]
          },
        },
        filename: 'assessment_{{ assessment.id }}'
      },
      accessibility: {
        description: 'Sankey plot for U.S. AON Benefit Tool',
        point: {
          valueDescriptionFormat: '{index}. {point.from} to {point.to}, {point.weight}.',
        },
      },
      tooltip: {
        headerFormat: null,
        formatter: function() {
          const point = this;
          return point.point.tooltipHTML || false;
        },
      },
      series: [{
        keys: ['from', 'to', 'weight'],
        data: {{ sankey_series.data | safe }},
        nodes: {{ sankey_series.nodes | safe }},
        colorByPoint: true,
        colors: ["#AEAEAE"]
      }],
    });
  </script>
{% endmacro %}


{% macro display_sankey(sankey_series, assessment) -%}
  {% include 'includes/highcharts.html' %}

  {% if sankey_series.data == [] %}
    <div class="alert alert-info">
      Please add at least one node to display diagram
    </div>
  {% else %}
    <figure class="highcharts-figure">
      <div id="highcharts-container" />
    </figure>
    {{ add_javascript__highcharts(sankey_series=sankey_series, assessment=assessment) }}
  {% endif %}
{% endmacro %}
